// <auto-generated />
using System;
using Appointment_UI.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Appointment_UI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200921180144_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Appointment.Models.Appointments", b =>
                {
                    b.Property<int>("AppointmentsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentsDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentsDurationInMinits")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerUserId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeUserId")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyCustomer")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AppointmentsId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("EmployeeUserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Appointment.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AppointmentsId")
                        .HasColumnType("int");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceTimeInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceId");

                    b.HasIndex("AppointmentsId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Appointment.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Appointment.Models.Customer", b =>
                {
                    b.HasBaseType("Appointment.Models.User");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("Appointment.Models.Employee", b =>
                {
                    b.HasBaseType("Appointment.Models.User");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Appointment.Models.Appointments", b =>
                {
                    b.HasOne("Appointment.Models.Customer", "Customer")
                        .WithMany("Appointments")
                        .HasForeignKey("CustomerUserId");

                    b.HasOne("Appointment.Models.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeUserId");
                });

            modelBuilder.Entity("Appointment.Models.Service", b =>
                {
                    b.HasOne("Appointment.Models.Appointments", null)
                        .WithMany("Services")
                        .HasForeignKey("AppointmentsId");
                });
#pragma warning restore 612, 618
        }
    }
}
